/*
  This script is not a part of the worker and should be used from node.
  It does all necessary preparations to setup you Cloudflare account, issue required keys, create admin access control conditions and deploy to CF Workers.
  You should already have installed all packages, filled wrangler.toml and logged in to wrangler cli.

  It is REQUIRED to have .env file with these env variables:
    - CF_ACCOUNT_ID - Cloudflare account id 
    - CF_API_TOKEN - Cloudflare API token with Workers_KV_Storage:Edit, Workers_Scripts:Edit, Stream:Edit permissions issued at https://dash.cloudflare.com/profile/api-tokens
    - MAX_VIDEO_DURATION - Maximum duration of video to be uploded via one time url (min 1s, max 21600s)
    !! this .env file will be automatically updated with keys generated by this code
*/

import axios from 'axios'
import { config } from 'dotenv'
import { spawn } from 'child_process'
import { appendFileSync, readFileSync, writeFileSync } from 'fs'

config()
const CF_ACCOUNT = process.env.CF_ACCOUNT_ID
const CF_TOKEN = process.env.CF_API_TOKEN
const MAX_VIDEO_DURATION = process.env.MAX_VIDEO_DURATION
const REGISTER_SECRET = process.env.REGISTER_SECRET

const callWrangler = (params) =>
  new Promise((resolve, reject) => {
    var res = ''
    const w = spawn('wrangler', params)
    w.stdout.on('data', (x) => {
      x = x.toString('utf-8')
      console.log(x)
      res += x
    })
    w.stderr.on('data', (x) => console.log(x.toString('utf-8')))
    w.on('close', () => resolve(res))
  })

const putWrangler = (echo, params) =>
  new Promise((resolve, reject) => {
    const w = spawn(
      `/usr/bin/sh -c "echo '${echo}' | wrangler ${params.join(' ')}"`,
      { shell: true },
    )
    w.stdout.on('data', (x) => console.log(x.toString('utf-8')))
    w.stderr.on('data', (x) => console.log(x.toString('utf-8')))
    w.on('close', resolve)
  })

const generateStreamKeys = async () => {
  try {
    console.log('Requesting keys for CF Stream')
    const response = await axios.post(
      `https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT}/stream/keys`,
      {},
      {
        headers: {
          Authorization: `Bearer ${CF_TOKEN}`,
        },
      },
    )

    if (response.status != 200 || !response.data.success)
      throw new Error('Failed to setup keys for cloudflare stream')
    const jwk = response.data.result.jwk
    const pem = response.data.result.pem
    const kid = response.data.result.id

    console.log('Successfully got jwk + pem')

    const envUpd = `\nCF_STREAM_JWK=${jwk}\nCF_STREAM_PEM=${pem}\nCF_STREAM_KID=${kid}\n`

    await Promise.all([
      putWrangler(jwk, ['secret', 'put', 'CF_STREAM_JWK']),
      putWrangler(pem, ['secret', 'put', 'CF_STREAM_PEM']),
      putWrangler(kid, ['secret', 'put', 'CF_STREAM_KID']),
    ])

    appendFileSync('.env', envUpd)
  } catch {
    console.error('Failed to generate stream keys')
  }
}

async function main() {
  await Promise.all([
    putWrangler(CF_ACCOUNT, ['secret', 'put', 'CF_ACCOUNT_ID']),
    putWrangler(CF_TOKEN, ['secret', 'put', 'CF_API_TOKEN']),
    putWrangler(MAX_VIDEO_DURATION, ['secret', 'put', 'MAX_VIDEO_DURATION']),
    putWrangler(REGISTER_SECRET, ['secret', 'put', 'REGISTER_SECRET']),
  ])

  try {
    let res = await callWrangler(['kv:namespace', 'create', 'VIDEO_AUTH_META'])
    let kv_id = res.match(/([0-9a-f]{32})/gi)[0]
    let wr = readFileSync('wrangler.toml')
    writeFileSync(
      'wrangler.toml',
      wr
        .toString()
        .replace(
          /VIDEO_AUTH_META\", id = \"(.*)\"}/i,
          `VIDEO_AUTH_META\", id = \"${kv_id}\"}`,
        ),
    )
  } catch (ex) {}

  if (
    process.env.CF_STREAM_KID === undefined ||
    process.env.CF_STREAM_JWK === undefined ||
    process.env.CF_STREAM_PEM === undefined
  )
    await generateStreamKeys()

  await callWrangler(['publish'])
}

main()
